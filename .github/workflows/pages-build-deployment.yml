name: pages-build-deployment

on:
  schedule:
    - cron: '01 00 1 1 *'
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  JEKYLL_ENV: "production"
  JEKYLL_DESTINATION: "./_site/"
  RUBY_VERSION: 2.7.5

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v3

      - name: Node.js setup
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Yarn install
        run: yarn install --frozen-lockfile
        # if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}

      - name: Ruby cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Ruby setup
        uses: ruby/setup-ruby@v1
        if: ${{ github.actor != 'nektos/act' }}
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Ruby setup
        uses: ruby/setup-ruby@v1
        if: ${{ github.actor == 'nektos/act' }}
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - if: ${{ github.actor == 'nektos/act' }}
        run: bundle install

      - name: jekyll build development
        run: bundle exec rake
        env: 
          JEKYLL_ENV: development

      - run: rm -rf ${{ env.JEKYLL_DESTINATION }} .jekyll-cache

      - name: jekyll build production
        run: bundle exec rake
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OCTOKIT_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Version get latest tag
        uses: actions/github-script@v2
        id: latesttag
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function getLatestTag() {
              const {data: tags} = await github.repos.listTags({
                owner: context.repo.owner,
                repo: context.repo.repo,
                per_page: 100,
              });

              const tagsMaped = tags.map(e => e.name);
              const tagsSorted = tagsMaped.sort().reverse();

              return tagsSorted[0];
            }

            try {
              const LASTEST_TAG = await getLatestTag();
            } catch (e) {
              console.error(e.msg, e);
            }

            if (typeof LASTEST_TAG === "undefined") {
              const LASTEST_TAG = "0.0.1";
              console.log("No tag found. Using default version " + LASTEST_TAG);
            }

            try {
            console.log(`LASTEST_TAG=${LASTEST_TAG}`);
            } catch (e) {
              console.error(e.msg, e);
            }
            try {
            console.log("LASTEST_TAG=" + LASTEST_TAG);
            } catch (e) {
              console.error(e.msg, e);
            }
            try {
            core.setOutput("LASTEST_TAG", ${LASTEST_TAG});
            } catch (e) {
              console.error(e.msg, e);
            }
            try {
            core.setOutput("LASTEST_TAG", LASTEST_TAG);
            } catch (e) {
              console.error(e.msg, e);
            }

      - name: Version increment
        run: |
          IFS='.' read -ra ADDR <<< "$LASTEST_TAG"
          ADDR[2]=$((ADDR[2] + 1))
          VERSION="${ADDR[0]}.${ADDR[1]}.${ADDR[2]}"
          VERSION_TIME=$(date -u +"%Y-%m-%dT%H:%M:%S.%3NZ")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION_TIME=$VERSION_TIME" >> $GITHUB_ENV
        shell: bash

      - name: Release create
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }} at ${{ env.VERSION_TIME }}
          draft: false
          prerelease: true

      - name: Archive production artifacts
        run: |
          zip -r site.zip ${{ env.JEKYLL_DESTINATION }}

      - name: Release asset upload
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./site.zip
          asset_name: site.zip
          asset_content_type: application/zip

  deploy:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: GitHub Pages setup
        uses: actions/configure-pages@v2
        id: pages
        if: ${{ github.actor != 'nektos/act' }}
        continue-on-error: true

      - name: GitHub Pages upload artifact
        uses: actions/upload-pages-artifact@v1.0.4
        if: ${{ success() && github.actor != 'nektos/act' }}
        continue-on-error: true
        with:
          path: ${{ env.JEKYLL_DESTINATION }}

      - name: Cloudflare Pages publish
        uses: cloudflare/pages-action@v1
        if: ${{ success() && github.actor != 'nektos/act' }}
        with:
          apiToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: zuralski-net
          directory: ${{ env.JEKYLL_DESTINATION }}

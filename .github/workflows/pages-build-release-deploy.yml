name: pages-build-release-deploy

on:
  schedule:
    - cron: '01 00 1 1 *'
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  JEKYLL_ENV: "production"
  JEKYLL_DESTINATION: "./_site/"
  RUBY_VERSION: 2.7.5
  SITEMAP_URL: "https://zuralski.net/sitemap.xml"

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: read

concurrency:
  group: "pages-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v3

      - name: Node.js setup
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'yarn'

      - name: Yarn install
        run: yarn install --frozen-lockfile
        # if: ${{ steps.yarn-cache.outputs.cache-hit != 'true' }}

      - name: Ruby cache
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - name: Ruby setup
        uses: ruby/setup-ruby@v1
        if: ${{ github.actor != 'nektos/act' }}
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Ruby setup
        uses: ruby/setup-ruby@v1
        if: ${{ github.actor == 'nektos/act' }}
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: false

      - if: ${{ github.actor == 'nektos/act' }}
        run: bundle install

      - name: jekyll build development
        run: bundle exec rake
        env: 
          JEKYLL_ENV: development

      - run: rm -rf ${{ env.JEKYLL_DESTINATION }} .jekyll-cache

      - name: jekyll build production
        run: |
          bundle exec rake
          find . -type f -exec sed -i 's|/pages/zuralski-net/|/|g' {} \;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JEKYLL_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OCTOKIT_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sitemap XML validate
        uses: cobraz/parse-sitemap@v1.1.1
        with:
          sitemap-url: file://${{ env.GITHUB_WORKSPACE }}/${{ env.JEKYLL_DESTINATION }}/sitemap.xml

      - name: Production artifacts archive
        run: zip -r site.zip ${{ env.JEKYLL_DESTINATION }}

      - name: Artifacts production upload ${{ env.JEKYLL_DESTINATION }}
        uses: actions/upload-artifact@v3
        with:
          name: dir-site-${{ github.sha }}
          path: ${{ env.JEKYLL_DESTINATION }}
          retention-days: 1

      - name: Artifacts production upload site.zip
        uses: actions/upload-artifact@v3
        with:
          name: file-site-${{ github.sha }}
          path: ./site.zip
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      LASTEST_TAG: ${{ steps.version_info.outputs.LASTEST_TAG }}
      RELEASE_INFO: ${{ steps.version_info.outputs.RELEASE_INFO }}
      REVISION: ${{ steps.version_info.outputs.REVISION }}
      VERSION: ${{ steps.version_info.outputs.VERSION }}
      VERSION_TIME: ${{ steps.version_info.outputs.VERSION_TIME }}
    steps:
      - name: semver install
        run: npm install semver

      - name: Version info
        uses: actions/github-script@v5
        id: version_info
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function getLatestTag() {
              const tagsAll = await github.paginate(
                github.rest.repos.listTags,
                {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100
                }, (response) => response.data
              );

              let tags = tagsAll.map(e => e.name);
              const tag = tags[0];
              return tag;
            }

            const LASTEST_TAG = await getLatestTag();
            if (typeof LASTEST_TAG === "undefined" || !LASTEST_TAG) {
              const LASTEST_TAG = "0.0.1";
              console.log("No tag found. Using default version " + LASTEST_TAG);
            }

            console.log(`LASTEST_TAG=${LASTEST_TAG}`);
            core.setOutput("LASTEST_TAG", LASTEST_TAG);

            const REVISION = "${{ github.sha }}".substring(0, 8);
            console.log(`REVISION=${REVISION}`);
            core.setOutput("REVISION", REVISION);

            const semver = require('semver');
            const VERSION = semver.inc(semver.coerce(LASTEST_TAG), 'prerelease', 'beta', false);
            console.log(`VERSION=${VERSION}`);
            core.setOutput("VERSION", VERSION);

            const VERSION_TIME = new Date().toISOString();
            console.log(`VERSION_TIME=${VERSION_TIME}`);
            core.setOutput("VERSION_TIME", VERSION_TIME);

            let releaseInfo = {
              releasedAt: VERSION_TIME,
              branch: "${{ github.ref_name }}",
              revision: REVISION,
              version: VERSION,
            };
            releaseInfo = JSON.stringify(releaseInfo);

            console.log(`RELEASE_INFO=${releaseInfo}`);
            core.setOutput("RELEASE_INFO", releaseInfo);

      - name: env vars setup
        run: |
            echo "LASTEST_TAG=$LASTEST_TAG" >> $GITHUB_ENV
            echo "RELEASE_INFO=$RELEASE_INFO" >> $GITHUB_ENV
            echo "REVISION=$REVISION" >> $GITHUB_ENV
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION_TIME=$VERSION_TIME" >> $GITHUB_ENV
        shell: bash
        env:
          LASTEST_TAG: ${{ steps.version_info.outputs.LASTEST_TAG }}
          VERSION: ${{ steps.version_info.outputs.VERSION }}
          VERSION_TIME: ${{ steps.version_info.outputs.VERSION_TIME }}
          RELEASE_INFO: ${{ steps.version_info.outputs.RELEASE_INFO }}
          REVISION: ${{ steps.version_info.outputs.REVISION }}

      - name: Changelog generate
        id: changelog_generate
        uses: johnyherangi/create-release-notes@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          format: "- {{subject}}"
#          base-ref: ${{ steps.version_info.outputs.LASTEST_TAG }}
#          head-ref: ${{ github.ref }}

      - name: Release create
        id: release_create
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.VERSION }}
          release_name: Release ${{ env.VERSION }} at ${{ env.VERSION_TIME }}
          body: ${{ steps.changelog_generate.outputs.release-notes }}
          draft: false
          prerelease: true

      - name: Artifacts production download site.zip
        uses: actions/download-artifact@v3
        with:
          name: file-site-${{ github.sha }}
          path: ./

      - name: Release asset upload
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_create.outputs.upload_url }}
          asset_path: ./site.zip
          asset_name: site.zip
          asset_content_type: application/zip

  deploy:
    needs: release
    runs-on: ubuntu-latest
    outputs:
      LASTEST_TAG: ${{ steps.version_info.outputs.LASTEST_TAG }}
      RELEASE_INFO: ${{ steps.version_info.outputs.RELEASE_INFO }}
      REVISION: ${{ steps.version_info.outputs.REVISION }}
      VERSION: ${{ steps.version_info.outputs.VERSION }}
      VERSION_TIME: ${{ steps.version_info.outputs.VERSION_TIME }}
    steps:
      - name: Artifacts production download ${{ env.JEKYLL_DESTINATION }}
        uses: actions/download-artifact@v3
        with:
          name: dir-site-${{ github.sha }}
          path: ${{ env.JEKYLL_DESTINATION }}

      - name: Version info
        uses: actions/github-script@v5
        id: version_info
        env:
          LASTEST_TAG: ${{ needs.release.outputs.LASTEST_TAG }}
          RELEASE_INFO: ${{ needs.release.outputs.RELEASE_INFO }}
          REVISION: ${{ needs.release.outputs.REVISION }}
          VERSION: ${{ needs.release.outputs.VERSION }}
          VERSION_TIME: ${{ needs.release.outputs.VERSION_TIME }}
        with:
          script: |
            const LASTEST_TAG = process.env.LASTEST_TAG;
            const RELEASE_INFO = process.env.RELEASE_INFO;
            const REVISION = process.env.REVISION;
            const VERSION = process.env.VERSION;
            const VERSION_TIME = process.env.VERSION_TIME;

            console.log(`LASTEST_TAG=${LASTEST_TAG}`);
            core.setOutput("LASTEST_TAG", ${LASTEST_TAG});

            console.log(`RELEASE_INFO=${RELEASE_INFO}`);
            core.setOutput("RELEASE_INFO", ${RELEASE_INFO});

            console.log(`REVISION=${REVISION}`);
            core.setOutput("REVISION", ${REVISION});

            console.log(`VERSION=${VERSION}`);
            core.setOutput("VERSION", ${VERSION});

            console.log(`VERSION_TIME=${VERSION_TIME}`);
            core.setOutput("VERSION_TIME", ${VERSION_TIME});

      - name: env vars setup
        run: |
            echo "LASTEST_TAG=$LASTEST_TAG" >> $GITHUB_ENV
            echo "RELEASE_INFO=$RELEASE_INFO" >> $GITHUB_ENV
            echo "REVISION=$REVISION" >> $GITHUB_ENV
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION_TIME=$VERSION_TIME" >> $GITHUB_ENV

            echo "LASTEST_TAG=$LASTEST_TAG"
            echo "RELEASE_INFO=$RELEASE_INFO"
            echo "REVISION=${{ env.REVISION }}"
            echo "VERSION=$VERSION"
            echo "VERSION_TIME=$VERSION_TIME"

            echo "${{ env.RELEASE_INFO }}" > ./_site/release.json
        shell: bash
        env:
          LASTEST_TAG: ${{ steps.version_info.outputs.LASTEST_TAG }}
          VERSION: ${{ steps.version_info.outputs.VERSION }}
          VERSION_TIME: ${{ steps.version_info.outputs.VERSION_TIME }}
          RELEASE_INFO: ${{ steps.version_info.outputs.RELEASE_INFO }}
          REVISION: ${{ steps.version_info.outputs.REVISION }}

#      - name: GitHub Pages setup
#        uses: actions/configure-pages@v2
#        id: github_pages_setup
#        if: ${{ github.actor != 'nektos/act' }}
#
#      - name: GitHub Pages upload artifact
#        uses: actions/upload-pages-artifact@v1.0.4
#        if: ${{ success() && github.actor != 'nektos/act' }}
#        with:
#          path: ${{ env.JEKYLL_DESTINATION }}

      - name: Cloudflare Pages publish
        uses: cloudflare/pages-action@v1
        if: ${{ success() && github.actor != 'nektos/act' }}
        with:
          apiToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: zuralski-net
          directory: ${{ env.JEKYLL_DESTINATION }}

  post_deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Node.js setup
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Version info
        uses: actions/github-script@v5
        id: version_info
        env:
          LASTEST_TAG: ${{ needs.deploy.outputs.LASTEST_TAG }}
          RELEASE_INFO: ${{ needs.deploy.outputs.RELEASE_INFO }}
          REVISION: ${{ needs.deploy.outputs.REVISION }}
          VERSION: ${{ needs.deploy.outputs.VERSION }}
          VERSION_TIME: ${{ needs.deploy.outputs.VERSION_TIME }}
        with:
          script: |
            const LASTEST_TAG = process.env.LASTEST_TAG;
            const RELEASE_INFO = process.env.RELEASE_INFO;
            const REVISION = process.env.REVISION;
            const VERSION = process.env.VERSION;
            const VERSION_TIME = process.env.VERSION_TIME;

            console.log(`LASTEST_TAG=${LASTEST_TAG}`);
            core.setOutput("LASTEST_TAG", ${LASTEST_TAG});

            console.log(`RELEASE_INFO=${RELEASE_INFO}`);
            core.setOutput("RELEASE_INFO", ${RELEASE_INFO});

            console.log(`REVISION=${REVISION}`);
            core.setOutput("REVISION", ${REVISION});

            console.log(`VERSION=${VERSION}`);
            core.setOutput("VERSION", ${VERSION});

            console.log(`VERSION_TIME=${VERSION_TIME}`);
            core.setOutput("VERSION_TIME", ${VERSION_TIME});

      - name: env vars setup
        run: |
            echo "LASTEST_TAG=$LASTEST_TAG" >> $GITHUB_ENV
            echo "RELEASE_INFO=$RELEASE_INFO" >> $GITHUB_ENV
            echo "REVISION=$REVISION" >> $GITHUB_ENV
            echo "VERSION=$VERSION" >> $GITHUB_ENV
            echo "VERSION_TIME=$VERSION_TIME" >> $GITHUB_ENV

            echo "LASTEST_TAG=$LASTEST_TAG"
            echo "RELEASE_INFO=$RELEASE_INFO"
            echo "REVISION=${{ env.REVISION }}"
            echo "VERSION=$VERSION"
            echo "VERSION_TIME=$VERSION_TIME"
        shell: bash
        env:
          LASTEST_TAG: ${{ steps.version_info.outputs.LASTEST_TAG }}
          VERSION: ${{ steps.version_info.outputs.VERSION }}
          VERSION_TIME: ${{ steps.version_info.outputs.VERSION_TIME }}
          RELEASE_INFO: ${{ steps.version_info.outputs.RELEASE_INFO }}
          REVISION: ${{ steps.version_info.outputs.REVISION }}

      - name: Cloudflare Cache purge
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}

      - name: Sitemap check status
        run: curl -sS --location --fail ${{ env.SITEMAP_URL }}

      - name: Deployment validate
        uses: actions/github-script@v5
        env:
          LASTEST_TAG: ${{ steps.version_info.outputs.LASTEST_TAG }}
          VERSION: ${{ steps.version_info.outputs.VERSION }}
          VERSION_TIME: ${{ steps.version_info.outputs.VERSION_TIME }}
          RELEASE_INFO: ${{ steps.version_info.outputs.RELEASE_INFO }}
          REVISION: ${{ steps.version_info.outputs.REVISION }}
        with:
          script: |
            const LASTEST_TAG = process.env.LASTEST_TAG;
            const RELEASE_INFO = process.env.RELEASE_INFO;
            const REVISION = process.env.REVISION;
            const VERSION = process.env.VERSION;
            const VERSION_TIME = process.env.VERSION_TIME;

            const https = require('https');
            const url = 'https://zuralski.net/release.json';
            https.get(url, (res) => {
              let data = '';

              res.on('data', (chunk) => {
                data += chunk;
              });

              res.on('end', (n) => {
                if (data.includes(${REVISION}) && data.includes(${VERSION})) {
                  console.log('Validation passed');
                } else {
                  console.log('Validation failed');
                  process.exit(1);
                }
              });

            }).on('error', (err) => {
              console.error(err.message, err);
            });

      - name: Sitemap ping Bing
        run: curl -sS -w "%{http_code}" --location --fail https://www.bing.com/ping?sitemap=${{ env.SITEMAP_URL }} -o /dev/null || true

      - name: Sitemap ping Google
        run: curl -sS -w "%{http_code}" --location --fail https://www.google.com/webmasters/tools/ping?sitemap=${{ env.SITEMAP_URL }} -o /dev/null || true

